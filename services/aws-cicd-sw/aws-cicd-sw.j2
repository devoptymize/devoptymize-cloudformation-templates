AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for AWS CodePipeline with Lambda CloudFront Invalidation

Parameters:
  Environment:
    Type: String
    Description: The name of resource that we need to create in AWS console.
    Default: {{environment}}
  StackName:
    Type: String
    Description: The name of resource that we need to create in AWS console.
    Default: {{stack_name}}
  S3BucketName:
    Type: String
    Description: Name of the Existing Amazon S3 bucket where the artifacts generated by the build process will be stored .
    Default: {{s3bucketname}}
  RepoName:
    Type: String
    Description: Name of the AWS CodeCommit repository where your application source code is stored.
    Default: {{repository_name}}
  BranchName:
    Type: String
    Description: Name of the branch in the CodeCommit repository that will be monitored for changes.Whenever changes are pushed to this branch, the pipeline will automatically start.
    Default: {{branch_name}}
  ComputeType:
    Type: String
    Description: The type of compute environment. This determines the number of CPU cores and memory the build environment uses.
    Default: {{compute_type}}
  Image:
    Type: String
    Description: The image tagthat identifies the Docker image to use for this build project.
    Default: {{image}}
  Type:
    Type: String
    Description: The type of build environment to use for related builds.
    Default: {{type}}
  Emails:
    Type: CommaDelimitedList
    Description: Email address to receive notifications via SNS
    Default: "{{ emails | join (', ') }}"
  Cloudfrontid:
    Type: String
    Description: The CloudFront distribution ID # This parameter is not used as ref inside the script - we are hardcoding it in the lambda zip code. This is for future ref.
    Default: {{cloudfront_distribution_id}}

Resources:
  PipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-${StackName}-ServiceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      # Add other policies/permissions as needed
      Policies:
        - PolicyName: !Sub '${Environment}-${StackName}-AWSCodePipelineFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codepipeline:*'
                Resource: '*'
        - PolicyName: !Sub '${Environment}-${StackName}-AWSCodeCommitFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codecommit:*'
                Resource: '*'
              - Effect: Allow
                Action: 's3:*'  # Add any other S3 actions you need here
                Resource: '*'
        - PolicyName: !Sub '${Environment}-${StackName}-AWSCodeBuildStartBuild'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codebuild:StartBuild'
                Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*'
              - Effect: Allow
                Action: 'codebuild:BatchGetBuilds'
                Resource: !Sub 'arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/*'
        - PolicyName: !Sub '${Environment}-${StackName}-AWSLambdaFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'lambda:*'
                Resource: '*'
        - PolicyName: !Sub '${Environment}-${StackName}-AWSSNSPublishAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'sns:Publish'
                Resource: !Ref SNSTopic
        - PolicyName: !Sub '${Environment}-${StackName}-AWSCodeStarNotifications'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codestar-notifications:CreateNotificationRule
                  - codestar-notifications:UpdateNotificationRule
                Resource: "*"
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-${StackName}-CodeBuildService'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub '${Environment}-${StackName}-AWSCodeBuildFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codebuild:*'
                Resource: '*'
              - Effect: Allow
                Action: 'codecommit:*'
                Resource: '*'
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'  # Add full access to all S3 resources
              - Effect: Allow
                Action: 'lambda:*'
                Resource: '*'
              - Effect: Allow
                Action: 'codedeploy:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*'
              - Effect: Allow
                Action: 'logs:PutLogEvents'
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:log-stream:*'
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${Environment}-${StackName}-artifact-bucket'
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref RepoName
      RepositoryDescription: !Sub 'repository for ${Environment}-${StackName}'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${Environment}-${StackName}-CodebuildProject'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
      Artifacts:
        Type: CODEPIPELINE  # Output artifact of the Build stage
      Environment:
        ComputeType:  !Ref ComputeType
        Image:  !Ref Image
        PrivilegedMode: true
        Type: !Ref Type





  CloudFrontInvalidationLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-${StackName}-LambdaFunctionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${Environment}-${StackName}-CloudFrontFullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'cloudfront:*'
                Resource: '*'
        - PolicyName: !Sub '${Environment}-${StackName}-AWSCodePipeline_FullAccess'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 'codepipeline:*'
                Resource: '*'
  CloudFrontInvalidationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Environment}-${StackName}-lambdaFunction'
      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt CloudFrontInvalidationLambdaFunctionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import time
          import json
          import logging

          def lambda_handler(event, context):
              # No need to assume_role since Lambda already has a role attached

              client = boto3.client('cloudfront')

              response = client.create_invalidation(
                  DistributionId="{{cloudfront_distribution_id}}",
                  InvalidationBatch={
                      'Paths': {
                          'Quantity': 1,
                          'Items': [
                              '/*',
                          ]
                      },
                      'CallerReference': str(time.time()).replace(".", "")
                  }
              )
              invalidation_id = response['Invalidation']['Id']

              print("Invalidation created successfully with Id: " + invalidation_id)

              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              logger.debug(json.dumps(event))

              codepipeline = boto3.client('codepipeline')
              job_id = event['CodePipeline.job']['id']

              try:
                  #raise ValueError('This message will appear in the CodePipeline UI.')
                  logger.info('Success!')
                  response = codepipeline.put_job_success_result(jobId=job_id)
                  logger.debug(response)
              except Exception as error:
                  logger.exception(error)
                  response = codepipeline.put_job_failure_result(
                      jobId=job_id,
                      failureDetails={
                        'type': 'JobFailed',
                        'message': f'{error.__class__.__name__}: {str(error)}'
                      }
                  )
                  logger.debug(response)

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${Environment}-${StackName}-Pipeline'
      RoleArn: !GetAtt PipelineServiceRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: 1
              Configuration:
                RepositoryName: !Ref RepoName
                BranchName: !Ref BranchName
                PollForSourceChanges: false
              OutputArtifacts:
                - Name: SourceArtifact

        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceArtifact  # Input artifact of the Build stage
              OutputArtifacts:
                - Name: BuildArtifact  # Output artifact of the Build stage
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployAction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref S3BucketName
                Extract: 'true'
              InputArtifacts:
                 - Name: BuildArtifact  # Input artifact of the Deploy stage
              RunOrder: 2
        - Name: Invalidation
          Actions:
            - Name: InvalidationAction
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: 1
              Configuration:
                FunctionName: !Ref CloudFrontInvalidationLambdaFunction
              RunOrder: 3

      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket

  # New SNS Topic Resource
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub '${Environment}-${StackName}-sns-CodePipeline Notifications'
      TopicName: !Sub '${Environment}-${StackName}-CodePipelineNotifications'
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - Ref: SNSTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codestar-notifications.amazonaws.com
            Action: sns:Publish
            Resource: !Ref SNSTopic
  # New SNS Subscription Resource
  {% for i in emails %}
  SNSSubscription{{ loop.index }}:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Select [ {{ loop.index - 1 }}, !Ref Emails ]
      Protocol: "email"
      TopicArn: !Ref SNSTopic
  {% endfor %}
  MyCodeStarNotificationRule:
    Type: "AWS::CodeStarNotifications::NotificationRule"
    Properties:
      Name: !Sub '${Environment}-${StackName}-MyCodePipelineNotificationRule'
      EventTypeIds:
        - codepipeline-pipeline-action-execution-succeeded
        - codepipeline-pipeline-action-execution-failed
      DetailType: FULL
      Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${CodePipeline}"
      Targets:
        - TargetAddress: !Ref SNSTopic
          TargetType: SNS
Outputs:
  PipelineServiceRoleArn:
    Description: ARN of the CodePipeline Service Role
    Value: !GetAtt PipelineServiceRole.Arn
