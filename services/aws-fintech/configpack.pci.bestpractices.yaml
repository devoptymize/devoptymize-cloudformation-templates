##################################################################################
#
#   Conformance Pack:
#     Operational Best Practices for PCI DSS 3.2.1
#
#   This conformance pack helps verify compliance with PCI DSS 3.2.1 requirements.
#
#   See Parameters section for names and descriptions of required parameters. 
#
##################################################################################
Resources:
  AccessKeysRotated:
    Properties:
      ConfigRuleName: accesskeys-rotated
      Description: Checks whether the active access keys are rotated within the number
        of days specified in maxAccessKeyAge. The rule is non-compliant if the access
        keys have not been rotated for more than maxAccessKeyAge number of days.
      InputParameters:
        maxAccessKeyAge: 90
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ACCESS_KEYS_ROTATED
    Type: AWS::Config::ConfigRule
  AcmCertificateExpirationCheck:
    Properties:
      ConfigRuleName: acm-certificate-expirationcheck
      Description: Checks whether ACM Certificates in your account are marked for
        expiration within the specified number of days. Certificates provided by ACM
        are automatically renewed. ACM does not automatically renew certificates that
        you import.
      InputParameters:
        daysToExpiration: 90
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope:
        ComplianceResourceTypes:
          - AWS::ACM::Certificate
      Source:
        Owner: AWS
        SourceIdentifier: ACM_CERTIFICATE_EXPIRATION_CHECK
    Type: AWS::Config::ConfigRule
  AlbHttpToHttpsRedirectionCheck:
    Properties:
      ConfigRuleName: alb-http-to-https-redirectioncheck
      Description: Checks whether HTTP to HTTPS redirection is configured on all HTTP
        listeners of Application Load Balancers. The rule is NON_COMPLIANT if one
        or more HTTP listeners of Application Load Balancer do not have HTTP to HTTPS
        redirection configured.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ALB_HTTP_TO_HTTPS_REDIRECTION_CHECK
    Type: AWS::Config::ConfigRule
  ApiGwCacheEnabledAndEncrypted:
    Properties:
      ConfigRuleName: api-gw-cacheenabled-and-encrypted
      Description: Checks that all methods in Amazon API Gateway stages have cache
        enabled and cache encrypted. The rule is NON_COMPLIANT if any method in Amazon
        API Gateway stage is not configured to cache or the cache is not encrypted.
      Scope:
        ComplianceResourceTypes:
          - AWS::ApiGateway::Stage
      Source:
        Owner: AWS
        SourceIdentifier: API_GW_CACHE_ENABLED_AND_ENCRYPTED
    Type: AWS::Config::ConfigRule
  ApiGwExecutionLoggingEnabled:
    Properties:
      ConfigRuleName: api-gw-executionlogging-enabled
      Description: Checks that all methods in Amazon API Gateway stage has logging
        enabled. The rule is NON_COMPLIANT if logging is not enabled. The rule is
        NON_COMPLIANT if loggingLevel is neither ERROR nor INFO.
      Scope:
        ComplianceResourceTypes:
          - AWS::ApiGateway::Stage
          - AWS::ApiGatewayV2::Stage
      Source:
        Owner: AWS
        SourceIdentifier: API_GW_EXECUTION_LOGGING_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailCloudWatchLogsEnabled:
    Properties:
      ConfigRuleName: cloud-trail-cloudwatch-logs-enabled
      Description: Checks whether AWS CloudTrail trails are configured to send logs
        to Amazon CloudWatch logs. The trail is non-compliant if the CloudWatchLogsLogGroupArn
        property of the trail is empty.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailEnabled:
    Properties:
      ConfigRuleName: cloudtrailenabled
      Description: Checks whether AWS CloudTrail is enabled in your AWS account.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailEncryptionEnabled:
    Properties:
      ConfigRuleName: cloudtrail-encryption-enabled
      Description: Checks whether AWS CloudTrail is configured to use the server side
        encryption (SSE) AWS Key Management Service (AWS KMS) customer master key
        (CMK) encryption. The rule is compliant if the KmsKeyId is defined.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENCRYPTION_ENABLED
    Type: AWS::Config::ConfigRule
  CloudTrailLogFileValidationEnabled:
    Properties:
      ConfigRuleName: cloudtrail-log-file-validation-enabled
      Description: Checks whether AWS CloudTrail creates a signed digest file with
        logs. AWS recommends that the file validation must be enabled on all trails.
        The rule is noncompliant if the validation is not enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED
    Type: AWS::Config::ConfigRule
  CloudtrailS3DataeventsEnabled:
    Properties:
      ConfigRuleName: cloudtrail-s3-dataeventsenabled
      Description: Checks whether at least one AWS CloudTrail trail is logging Amazon
        S3 data events for all S3 buckets. The rule is NON_COMPLIANT if trails log
        data events for S3 buckets is not configured.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDTRAIL_S3_DATAEVENTS_ENABLED
    Type: AWS::Config::ConfigRule
  CloudwatchLogGroupEncrypted:
    Properties:
      ConfigRuleName: cloudwatchlog-group-encrypted
      Description: Checks whether a log group in Amazon CloudWatch Logs is encrypted.
        The rule is NON_COMPLIANT if CloudWatch Logs has log group without encryption
        enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_LOG_GROUP_ENCRYPTED
    Type: AWS::Config::ConfigRule
  CmkBackingKeyRotationEnabled:
    Properties:
      ConfigRuleName: cmk-backing-keyrotation-enabled
      Description: Checks that key rotation is enabled for each key and matches to
        the key ID of the customer created customer master key (CMK). The rule is
        compliant, if the key rotation is enabled for specific key object.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: CMK_BACKING_KEY_ROTATION_ENABLED
    Type: AWS::Config::ConfigRule
  CodebuildProjectEnvvarAwscredCheck:
    Properties:
      ConfigRuleName: codebuild-projectenvvar-awscred-check
      Description: Checks whether the project contains environment variables AWS_ACCESS_KEY_ID
        and AWS_SECRET_ACCESS_KEY. The rule is NON_COMPLIANT when the project environment
        variables contains plaintext credentials.
      Scope:
        ComplianceResourceTypes:
          - AWS::CodeBuild::Project
      Source:
        Owner: AWS
        SourceIdentifier: CODEBUILD_PROJECT_ENVVAR_AWSCRED_CHECK
    Type: AWS::Config::ConfigRule
  CodebuildProjectSourceRepoUrlCheck:
    Properties:
      ConfigRuleName: codebuild-project-sourcerepo-url-check
      Description: Checks whether the GitHub or Bitbucket source repository URL contains
        either personal access tokens or user name and password. The rule is complaint
        with the usage of OAuth to grant authorization for accessing GitHub or Bitbucket
        repositories.
      Scope:
        ComplianceResourceTypes:
          - AWS::CodeBuild::Project
      Source:
        Owner: AWS
        SourceIdentifier: CODEBUILD_PROJECT_SOURCE_REPO_URL_CHECK
    Type: AWS::Config::ConfigRule
  DmsReplicationNotPublic:
    Properties:
      ConfigRuleName: dms-replication-notpublic
      Description: Checks whether AWS Database Migration Service replication instances
        are public. The rule is NON_COMPLIANT if PubliclyAccessible field is True.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope:
        ComplianceResourceTypes: []
      Source:
        Owner: AWS
        SourceIdentifier: DMS_REPLICATION_NOT_PUBLIC
    Type: AWS::Config::ConfigRule
  DynamodbTableEncryptionEnabled:
    Properties:
      ConfigRuleName: dynamodb-tableencryption-enabled
      Description: Checks whether the Amazon DynamoDB tables are encrypted and checks
        their status. The rule is compliant if the status is enabled or enabling.
      Scope:
        ComplianceResourceTypes:
          - AWS::DynamoDB::Table
      Source:
        Owner: AWS
        SourceIdentifier: DYNAMODB_TABLE_ENCRYPTION_ENABLED
    Type: AWS::Config::ConfigRule
  EbsSnapshotPublicRestorableCheck:
    Properties:
      ConfigRuleName: ebs-snapshot-publicrestorable-check
      Description: Checks whether Amazon Elastic Block Store (Amazon EBS) snapshots
        are not publicly restorable. The rule is NON_COMPLIANT if one or more snapshots
        with RestorableByUserIds field are set to all, that is, Amazon EBS snapshots
        are public.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EBS_SNAPSHOT_PUBLIC_RESTORABLE_CHECK
    Type: AWS::Config::ConfigRule
  Ec2InstanceManagedBySsm:
    Properties:
      ConfigRuleName: ec2-instance-managed-by-systemsmanager
      Description: Checks whether the Amazon EC2 instances in your account are managed
        by AWS Systems Manager.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
          - AWS::SSM::ManagedInstanceInventory
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_MANAGED_BY_SSM
    Type: AWS::Config::ConfigRule
  Ec2InstanceNoPublicIp:
    Properties:
      ConfigRuleName: ec2instance-no-public-ip
      Description: Checks whether Amazon Elastic Compute Cloud (Amazon EC2) instances
        have a public IP association. The rule is NON_COMPLIANT if the publicIp field
        is present in the Amazon EC2 instance configuration item. This rule applies
        only to IPv4.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_NO_PUBLIC_IP
    Type: AWS::Config::ConfigRule
  Ec2ManagedinstanceAssociationComplianceStatusCheck:
    Properties:
      ConfigRuleName: ec2managedinstance-association-compliance-status-check
      Description: Checks whether the compliance status of the AWS Systems Manager
        association compliance is COMPLIANT or NON_COMPLIANT after the association
        execution on the instance. The rule is compliant if the field status is COMPLIANT.
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::AssociationCompliance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_ASSOCIATION_COMPLIANCE_STATUS_CHECK
    Type: AWS::Config::ConfigRule
  Ec2ManagedinstancePatchComplianceStatusCheck:
    Properties:
      ConfigRuleName: ec2managedinstance-patch-compliance-status-check
      Description: Checks whether the compliance status of the AWS Systems Manager
        patch compliance is COMPLIANT or NON_COMPLIANT after the patch installation
        on the instance. The rule is compliant if the field status is COMPLIANT.
      Scope:
        ComplianceResourceTypes:
          - AWS::SSM::PatchCompliance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK
    Type: AWS::Config::ConfigRule
  Ec2SecurityGroupAttachedToEni:
    Properties:
      ConfigRuleName: ec2security-group-attached-to-eni
      Description: 'Checks that non-default security groups are attached to Amazon
        Elastic Compute Cloud (EC2) instances or an elastic network interfaces (ENIs).
        The rule returns NON_COMPLIANT if the security group is not associated with
        an EC2 instance or an ENI. '
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: EC2_SECURITY_GROUP_ATTACHED_TO_ENI
    Type: AWS::Config::ConfigRule
  EfsEncryptedCheck:
    Properties:
      ConfigRuleName: efsencrypted-check
      Description: Checks whether Amazon EFS are configured to encrypt file data using
        AWS KMS. The rule is NON_COMPLIANT if the Encrypted key is set to False on
        DescribeFileSystems or, if specified, KmsKeyId key on DescribeFileSystems
        is not matching KmsKeyId parameter.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EFS_ENCRYPTED_CHECK
    Type: AWS::Config::ConfigRule
  EipAttached:
    Properties:
      ConfigRuleName: eipattached
      Description: Checks whether all EIP addresses allocated to a VPC are attached
        to EC2 instances or in-use ENIs.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::EIP
      Source:
        Owner: AWS
        SourceIdentifier: EIP_ATTACHED
    Type: AWS::Config::ConfigRule
  ElasticsearchEncryptedAtRest:
    Properties:
      ConfigRuleName: elasticsearchencrypted-at-rest
      Description: Checks whether Amazon Elasticsearch Service (Amazon ES) domains
        have encryption at rest configuration enabled. The rule is NON_COMPLIANT if
        EncryptionAtRestOptions field is not enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_ENCRYPTED_AT_REST
    Type: AWS::Config::ConfigRule
  ElasticsearchInVpcOnly:
    Properties:
      ConfigRuleName: elasticsearchin-vpc-only
      Description: Checks whether Amazon Elasticsearch Service domains are in Amazon
        Virtual Private Cloud (VPC). The rule is NON_COMPLIANT if ElasticSearch Service
        domain endpoint is public.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_IN_VPC_ONLY
    Type: AWS::Config::ConfigRule
  ElbAcmCertificateRequired:
    Properties:
      ConfigRuleName: elb-acm-certificaterequired
      Description: This rule checks whether the Elastic Load Balancer(s) uses SSL
        certificates provided by AWS Certificate Manager. You must use an SSL or HTTPS
        listener with your Elastic Load Balancer to use this rule.
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancing::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_ACM_CERTIFICATE_REQUIRED
    Type: AWS::Config::ConfigRule
  ElbLoggingEnabled:
    Properties:
      ConfigRuleName: elb-loggingenabled
      Description: Checks whether the Application Load Balancers and the Classic Load
        Balancers have logging enabled.
      Scope:
        ComplianceResourceTypes:
          - AWS::ElasticLoadBalancing::LoadBalancer
          - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_LOGGING_ENABLED
    Type: AWS::Config::ConfigRule
  EmrKerberosEnabled:
    Properties:
      ConfigRuleName: emrkerberos-enabled
      Description: The rule is NON_COMPLIANT if a security configuration is not attached
        to the cluster or the security configuration does not satisfy the specified
        rule parameters.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: EMR_KERBEROS_ENABLED
    Type: AWS::Config::ConfigRule
  EmrMasterNoPublicIp:
    Properties:
      ConfigRuleName: emr-masterno-public-ip
      Description: Checks whether Amazon Elastic MapReduce (EMR) clusters' master
        nodes have public IPs. The rule is NON_COMPLIANT if the master node has a
        public IP.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope:
        ComplianceResourceTypes: []
      Source:
        Owner: AWS
        SourceIdentifier: EMR_MASTER_NO_PUBLIC_IP
    Type: AWS::Config::ConfigRule
  EncryptedVolumes:

    Properties:
      ConfigRuleName: encryptedvolumes
      Description: Checks whether EBS volumes that are in an attached state are encrypted.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES
    Type: AWS::Config::ConfigRule
  GuarddutyEnabledCentralized:
    Properties:
      ConfigRuleName: guarddutyenabled-centralized
      Description: Checks whether GuardDuty is enabled. You can optionally verify
        that the results are centralized in a specific AWS Account.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: GUARDDUTY_ENABLED_CENTRALIZED
    Type: AWS::Config::ConfigRule
  IamPasswordPolicy:
    Properties:
      ConfigRuleName: iam-passwordpolicy
      Description: Checks whether the account password policy for IAM users meets
        the specified requirements.
      InputParameters:
        MaxPasswordAge: 90
        MinimumPasswordLength: 7
        PasswordReusePrevention: 4
        RequireLowercaseCharacters: TRUE
        RequireNumbers: TRUE
        RequireSymbols: TRUE
        RequireUppercaseCharacters: TRUE
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY
    Type: AWS::Config::ConfigRule
  IamPolicyNoStatementsWithAdminAccess:
    Properties:
      ConfigRuleName: iam-policy-no-statementswithadmin-access
      Description: 'Checks whether the default version of AWS Identity and Access
        Management (IAM) policies do not have administrator access. If any statement
        has "Effect": "Allow" with "Action": "*" over "Resource": "*", the rule is
        non-compliant.'
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::Policy
      Source:
        Owner: AWS
        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS
    Type: AWS::Config::ConfigRule
  IamRootAccessKeyCheck:
    Properties:
      ConfigRuleName: iam-root-accesskey-check
      Description: Checks whether the root user access key is available. The rule
        is compliant if the user access key does not exist.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK
    Type: AWS::Config::ConfigRule
  IamUserMfaEnabled:
    Properties:
      ConfigRuleName: iam-user-mfaenabled
      Description: Checks whether the AWS Identity and Access Management users have
        multi-factor authentication (MFA) enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_MFA_ENABLED
    Type: AWS::Config::ConfigRule
  IamUserNoPoliciesCheck:
    Properties:
      ConfigRuleName: iam-user-nopolicies-check
      Description: Checks that none of your IAM users have policies attached. IAM
        users must inherit permissions from IAM groups or roles.
      Scope:
        ComplianceResourceTypes:
          - AWS::IAM::User
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_NO_POLICIES_CHECK
    Type: AWS::Config::ConfigRule
  IamUserUnusedCredentialsCheck:
    Properties:
      ConfigRuleName: iam-user-unusedcredentials-check
      Description: Checks whether your AWS Identity and Access Management (IAM) users
        have passwords or active access keys that have not been used within the specified
        number of days you provided.
      InputParameters:
        maxCredentialUsageAge: 90
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK
    Type: AWS::Config::ConfigRule
  IncomingSshDisabled:
    Properties:
      ConfigRuleName: restrictedssh
      Description: Checks whether security groups that are in use disallow unrestricted
        incoming SSH traffic.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED
    Type: AWS::Config::ConfigRule
  InternetGatewayAuthorizedVpcOnly:
    Properties:
      ConfigRuleName: internet-gateway-authorizedvpc-only
      Description: Checks that Internet gateways (IGWs) are only attached to an authorized
        Amazon Virtual Private Cloud (VPCs). The rule is NON_COMPLIANT if IGWs are
        not attached to an authorized VPC.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::InternetGateway
      Source:
        Owner: AWS
        SourceIdentifier: INTERNET_GATEWAY_AUTHORIZED_VPC_ONLY
    Type: AWS::Config::ConfigRule
  LambdaFunctionPublicAccessProhibited:
    Properties:
      ConfigRuleName: lambda-function-publicaccess-prohibited
      Description: Checks whether the Lambda function policy prohibits public access.
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED
    Type: AWS::Config::ConfigRule
  LambdaInsideVpc:
    Properties:
      ConfigRuleName: lambdainside-vpc
      Description: Checks whether an AWS Lambda function is in an Amazon Virtual Private
        Cloud. The rule is NON_COMPLIANT if the Lambda function is not in a VPC.
      Scope:
        ComplianceResourceTypes:
          - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_INSIDE_VPC
    Type: AWS::Config::ConfigRule
  MfaEnabledForIamConsoleAccess:
    Properties:
      ConfigRuleName: mfa-enabled-for-iamconsole-access
      Description: Checks whether AWS Multi-Factor Authentication (MFA) is enabled
        for all AWS Identity and Access Management (IAM) users that use a console
        password. The rule is compliant if MFA is enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS
    Type: AWS::Config::ConfigRule
  RdsInstancePublicAccessCheck:
    Properties:
      ConfigRuleName: rds-instance-publicaccess-check
      Description: Checks whether the Amazon Relational Database Service (RDS) instances
        are not publicly accessible. The rule is non-compliant if the publiclyAccessible
        field is true in the instance configuration item.
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
    Type: AWS::Config::ConfigRule
  RdsSnapshotsPublicProhibited:
    Properties:
      ConfigRuleName: rds-snapshots-publicprohibited
      Description: Checks if Amazon Relational Database Service (Amazon RDS) snapshots
        are public. The rule is non-compliant if any existing and new Amazon RDS snapshots
        are public.
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBSnapshot
          - AWS::RDS::DBClusterSnapshot
      Source:
        Owner: AWS
        SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED
    Type: AWS::Config::ConfigRule
  RdsStorageEncrypted:
    Properties:
      ConfigRuleName: rds-storageencrypted
      Description: Checks whether storage encryption is enabled for your RDS DB instances.
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_STORAGE_ENCRYPTED
    Type: AWS::Config::ConfigRule
  RedshiftClusterConfigurationCheck:
    Properties:
      ConfigRuleName: redshift-clusterconfiguration-check
      Description: Checks whether Amazon Redshift clusters have the specified settings.
      InputParameters:
        clusterDbEncrypted: 'TRUE'
        loggingEnabled: 'TRUE'
      Scope:
        ComplianceResourceTypes:
          - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_CLUSTER_CONFIGURATION_CHECK
    Type: AWS::Config::ConfigRule
  RedshiftClusterPublicAccessCheck:
    Properties:
      ConfigRuleName: redshift-cluster-publicaccess-check
      Description: Checks whether Amazon Redshift clusters are not publicly accessible.
        The rule is NON_COMPLIANT if the publiclyAccessible field is true in the cluster
        configuration item.
      Scope:
        ComplianceResourceTypes:
          - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_CLUSTER_PUBLIC_ACCESS_CHECK
    Type: AWS::Config::ConfigRule
  RedshiftRequireTlsSsl:
    Properties:
      ConfigRuleName: redshift-requiretls-ssl
      Description: Checks whether Amazon Redshift clusters require TLS/SSL encryption
        to connect to SQL clients. The rule is NON_COMPLIANT if any Amazon Redshift
        cluster has parameter require_SSL not set to true.
      Scope:
        ComplianceResourceTypes:
          - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_REQUIRE_TLS_SSL
    Type: AWS::Config::ConfigRule
  RestrictedIncomingTraffic:
    Properties:
      ConfigRuleName: restrictedcommon-ports
      Description: Checks whether security groups that are in use disallow unrestricted
        incoming TCP traffic to the specified ports.
      InputParameters:
        blockedPort1: 20 
        blockedPort2: 21
        blockedPort3: 3389
        blockedPort4: 3306
        blockedPort5: 4333
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC
    Type: AWS::Config::ConfigRule
  RootAccountHardwareMfaEnabled:
    Properties:
      ConfigRuleName: root-accounthardware-mfa-enabled
      Description: Checks whether your AWS account is enabled to use multi-factor
        authentication (MFA) hardware device to sign in with root credentials.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED
    Type: AWS::Config::ConfigRule
  RootAccountMfaEnabled:
    Properties:
      ConfigRuleName: root-accountmfa-enabled
      Description: Checks whether the root user of your AWS account requires multi-factor
        authentication for console sign-in.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
    Type: AWS::Config::ConfigRule
  S3AccountLevelPublicAccessBlocks:
    Properties:
      ConfigRuleName: s3-account-levelpublic-access-blocks
      Description: Checks whether the required public access block settings are configured
        from account level. The rule is NON_COMPLIANT when the public access block
        settings are not configured from account level.
      InputParameters:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::AccountPublicAccessBlock
      Source:
        Owner: AWS
        SourceIdentifier: S3_ACCOUNT_LEVEL_PUBLIC_ACCESS_BLOCKS
    Type: AWS::Config::ConfigRule
  S3BucketLoggingEnabled:
    Properties:
      ConfigRuleName: s3-bucketlogging-enabled
      Description: Checks whether logging is enabled for your S3 buckets.
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_LOGGING_ENABLED
    Type: AWS::Config::ConfigRule
  S3BucketPolicyGranteeCheck:
    Properties:
      ConfigRuleName: s3-bucketpolicy-grantee-check
      Description: Checks that the access granted by the Amazon S3 bucket is restricted
        to any of the AWS principals, federated users, service principals, IP addresses,
        or VPCs that you provide. The rule is COMPLIANT if a bucket policy is not
        present.
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_POLICY_GRANTEE_CHECK
    Type: AWS::Config::ConfigRule
  S3BucketPublicReadProhibited:
    Properties:
      ConfigRuleName: s3-bucketpublic-read-prohibited
      Description: Checks that your Amazon S3 buckets do not allow public read access.
        The rule checks the Block Public Access settings, the bucket policy, and the
        bucket access control list (ACL).
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
    Type: AWS::Config::ConfigRule
  S3BucketPublicWriteProhibited:
    Properties:
      ConfigRuleName: s3-bucketpublic-write-prohibited
      Description: Checks that your Amazon S3 buckets do not allow public write access.
        The rule checks the Block Public Access settings, the bucket policy, and the
        bucket access control list (ACL).
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED
    Type: AWS::Config::ConfigRule
  S3BucketServerSideEncryptionEnabled:
    Properties:
      ConfigRuleName: s3-bucketserver-side-encryption-enabled
      Description: Checks that your Amazon S3 bucket either has S3 default encryption
        enabled or that the S3 bucket policy explicitly denies put-object requests
        without server side encryption.
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SERVER_SIDE_ENCRYPTION_ENABLED
    Type: AWS::Config::ConfigRule
  S3BucketSslRequestsOnly:
    Properties:
      ConfigRuleName: s3bucket-ssl-requests-only
      Description: Checks whether S3 buckets have policies that require requests to
        use Secure Socket Layer (SSL).
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_SSL_REQUESTS_ONLY
    Type: AWS::Config::ConfigRule
  S3BucketVersioningEnabled:
    Properties:
      ConfigRuleName: s3bucket-versioning-enabled
      Description: Checks whether versioning is enabled for your S3 buckets.
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED
    Type: AWS::Config::ConfigRule
  SagemakerEndpointConfigurationKmsKeyConfigured:
    Properties:
      ConfigRuleName: sagemaker-endpoint-configuration-kmskey-configured
      Description: Checks whether AWS Key Management Service (KMS) key is configured
        for an Amazon SageMaker endpoint configuration. The rule is NON_COMPLIANT
        if 'KmsKeyId' is not specified for the Amazon SageMaker endpoint configuration.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SAGEMAKER_ENDPOINT_CONFIGURATION_KMS_KEY_CONFIGURED
    Type: AWS::Config::ConfigRule
  SagemakerNotebookInstanceKmsKeyConfigured:
    Properties:
      ConfigRuleName: sagemaker-notebook-instance-kmskey-configured
      Description: Check whether an AWS Key Management Service (KMS) key is configured
        for an Amazon SageMaker notebook instance. The rule is NON_COMPLIANT if 'KmsKeyId'
        is not specified for the Amazon SageMaker notebook instance.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SAGEMAKER_NOTEBOOK_INSTANCE_KMS_KEY_CONFIGURED
    Type: AWS::Config::ConfigRule
  SagemakerNotebookNoDirectInternetAccess:
    Properties:
      ConfigRuleName: sagemaker-notebook-no-directinternet-access
      Description: Checks whether direct internet access is disabled for an Amazon
        SageMaker notebook instance. The rule is NON_COMPLIANT if Amazon SageMaker
        notebook instances are internet-enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SAGEMAKER_NOTEBOOK_NO_DIRECT_INTERNET_ACCESS
    Type: AWS::Config::ConfigRule
  SecretsmanagerRotationEnabledCheck:
    Properties:
      ConfigRuleName: secretsmanager-rotationenabled-check
      Description: Checks whether AWS Secret Manager secret has rotation enabled.
        If the maximumAllowedRotationFrequency parameter is specified, the rotation
        frequency of the secret is compared with the maximum allowed frequency.
      Scope:
        ComplianceResourceTypes:
          - AWS::SecretsManager::Secret
      Source:
        Owner: AWS
        SourceIdentifier: SECRETSMANAGER_ROTATION_ENABLED_CHECK
    Type: AWS::Config::ConfigRule
  SecurityhubEnabled:
    Properties:
      ConfigRuleName: securityhubenabled
      Description: Checks that AWS Security Hub is enabled for an AWS Account. The
        rule is NON_COMPLIANT if AWS Security Hub is not enabled.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: SECURITYHUB_ENABLED
    Type: AWS::Config::ConfigRule
  VpcDefaultSecurityGroupClosed:
    Properties:
      ConfigRuleName: vpc-default-securitygroup-closed
      Description: Checks that the default security group of any Amazon Virtual Private
        Cloud (VPC) does not allow inbound or outbound traffic. The rule is non-compliant
        if the default security group has one or more inbound or outbound traffic.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_DEFAULT_SECURITY_GROUP_CLOSED
    Type: AWS::Config::ConfigRule
  VpcFlowLogsEnabled:
    Properties:
      ConfigRuleName: vpc-flowlogs-enabled
      Description: Checks whether Amazon Virtual Private Cloud flow logs are found
        and enabled for Amazon VPC.
      MaximumExecutionFrequency: TwentyFour_Hours
      Scope: {}
      Source:
        Owner: AWS
        SourceIdentifier: VPC_FLOW_LOGS_ENABLED
    Type: AWS::Config::ConfigRule
  VpcSgOpenOnlyToAuthorizedPorts:
    Properties:
      ConfigRuleName: vpc-sg-open-onlyto-authorized-ports
      Description: Checks whether any security groups with inbound 0.0.0.0/0 have
        TCP or UDP ports accessible. The rule is NON_COMPLIANT when a security group
        with inbound 0.0.0.0/0 has a port accessible which is not specified in the
        rule parameters.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_SG_OPEN_ONLY_TO_AUTHORIZED_PORTS
    Type: AWS::Config::ConfigRule
