### CLOUDFORMATION SCRIPT FOR CREATING NETWORK STACK ###
Parameters:
  VPCCIDR:
    Type: String
    Default: "{{ vpc_cidr_range }}"
  PublicSubnetCIDRs:
    Type: CommaDelimitedList
    Default: "{{ public_subnets | join (', ') }}"
  PrivateSubnetCIDRs:
    Type: CommaDelimitedList
    Default: "{{ private_subnets | join (', ') }}"
  VPCName:
    Type: String
    Default: {{ vpc_name }}
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref VPCName

  # Our VPC will need internet access:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-IGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Route table
  {% for i in public_subnets %}
  PublicSubnet{{ loop.index }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ {{ loop.index - 1 }}, !Ref PublicSubnetCIDRs ]
      AvailabilityZone: !Select [ {{ loop.index - 1 }}, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-Subnet-{{ loop.index }}
  PublicRouteTable{{ loop.index }}:
    Type: AWS::EC2::RouteTable
    DependsOn:
       - InternetGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-Route-Table-{{ loop.index }}
  PublicRoute{{ loop.index }}:
    Type: AWS::EC2::Route
    DependsOn:
       - PublicRouteTable{{ loop.index }}
       - InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable{{ loop.index }}
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTableAssociation{{ loop.index }}:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet{{ loop.index }}
        RouteTableId: !Ref PublicRouteTable{{ loop.index }}
  {% endfor %}
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatEIP
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatEIP.AllocationId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway
  {% for i in private_subnets %}
  PrivateSubnet{{ loop.index }}:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ {{ loop.index - 1 }}, !Ref PrivateSubnetCIDRs ]
      AvailabilityZone: !Select [ {{ loop.index - 1 }}, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-Subnet-{{ loop.index }}
  PrivateRouteTable{{ loop.index }}:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-Route-Table-{{ loop.index }}
  PrivateRoute{{ loop.index }}:
    Type: AWS::EC2::Route
    DependsOn:
      - NatGateway
      - PrivateRouteTable{{ loop.index }}
    Properties:
      RouteTableId: !Ref PrivateRouteTable{{ loop.index }}
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateRouteTableAssociation{{ loop.index }}:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet{{ loop.index }}
      RouteTableId: !Ref PrivateRouteTable{{ loop.index }}
  {% endfor %}

